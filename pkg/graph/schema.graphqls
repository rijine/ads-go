# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Upload

type Post {
    id: ID!
    title: String!
    url: String!
    description: String!
    user: BasicUser!
    images: [Image]!
    price: Float
    tags: [String]!
    platform: String!
    language: String!
    expectedViews: String!
    duration: Int!
    sponsors: String

    status: String!
    isActive: Boolean!
    availableFrom: Int!
    publishingDate: Int!
    createdAt: Int!

    city: String!
    state: String!
    country: String!
}

type User {
    id: ID!
    name: String!
    displayName: String
    url: String

    profileImage: Image
    profileImageUrl: String
    description: String
    address: Address
    phone: String

    email: String
    username: String
    password: String
    verificationKey: String
    verificationExpiry: Int

    registeredOn: Int
    isCompany: Boolean
    rating: Int

    frequency: String
    avgViews: Int
    customers: String

    level: Int
    posts: [Post]
    history: [History]
}

type Portfolio {
    title: String!
    platform: String!
    url: String!
    images: [Image]!
}

type Address {
    houseNo: String!
    street: String!
    city: String!
    district: String!
    state: String!
    country: String!
    pinCode: String!
}

# User Info for post
type BasicUser {
    id: ID!
    displayName: String!
    rating: Float!
}

type History {
    id: ID!
    title: String!
}

type Image {
    title: String!
    url: String!
    thumbUrl: String!
    description: String!
}

type AuthUser {
    email: String!
    displayName: String!
    token: String!
    expiry: Int!
    # roles: [String]
}

type Enquiry {
    id: ID!
    postId: String!
    userId: String!
    name: String
    email: String
    phone: String
    subject: String
    content: String
    messagedAt: Int
    isRead: Boolean
}

type Chat {
    id: ID!
    userId: String!
    receiverId: String!
    messages: [Message]!
}

type Message {
    content: String
    image: MessageImage
    isRead: Boolean!
    messagedAt: Int!
}

type MessageImage {
    url: String
    thumbUrl: String
}

type Query {
    login(credentials: Credential): AuthUser!
    user(id: String): User!
    userByUrl(url: String): User!
    post(id: String): Post!
    postByUrl(url: String): Post!
    posts(filters: PostFilter): [Post!]!

    #auth

}

input NewUser {
    name: String!
    email: String!
    password: String!
}

input Credential {
    username: String!
    password: String!
}

input Paging {
    page: Int!
    offset: Int!
}

input PostFilter {
    paging: Paging
    filter: PostFilter
    order: SortOrder
}

input SearchFilter {
    keyword: String
    searchOn: String
    tags: [String]
    userId: String
}

input SortOrder {
    sortBy: String
    order: Boolean
}

input NewPost {
    title: String!
    description: String!
    images: [PostImage]
    price: Float
    tags: [String]

    platforms: [String]
    language: String
    expectedViews: Int
    duration: Int
    availableFrom: Int
    publishingDate: Int
    createdAt: Int

    country: String
    state: String
    city: String
}

input PostImage {
    title: String
    image: Upload
    description: String
}

input ChangePassword {
    oldPassword: String!
    password: String!
    confirmPassword: String!
}

input NewEnquiry {
    postId: String!
    name: String
    email: String
    phone: String
    subject: String
    content: String
}

input NewMessage {
    receiverId: String
    content:  String
    image: Upload
}

type Mutation {
    addPost(post: NewPost): Post!
    editPost(post: NewPost): Post!
    forgotPassword(email: String): Boolean!
    changePassword(password: ChangePassword): Boolean!
    confirmEmail(key: String): AuthUser

    # No auth
    register(user: NewUser): Boolean!
}