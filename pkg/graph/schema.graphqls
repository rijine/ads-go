# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Upload
scalar ObjectID

""" Authorized users """
directive @auth on QUERY | MUTATION | FIELD_DEFINITION

directive @demo on INPUT_FIELD_DEFINITION

""" String length limit """
directive @maxlength(
    """ Maximum allowed length """
    max: Int!
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

type Post {
    id: ID!
    userId: String!
    title: String!
    url: String! # generated, meta informations
    description: String!
    images: [Image]!
    price: Float
    tags: [String]!
    platform: String! ## TODO: list
    language: String!
    duration: Int!
    sponsors: String ## ??
    expectedViews: String!

    status: String!
    isActive: Boolean!
    availableFrom: Int!
    publishingDate: Int!
    createdAt: Int!

    city: String!
    state: String!
    country: String!

    # customer resolvers
    user: BasicUser!
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    displayName: String!
    url: String! # generated

    profileImage: Image! # ???
    profileImageUrl: String! ## merge
    description: String!
    address: Address!
    phone: String!

    email: String!
    username: String!
    password: String! #TODO remove
    verificationKey: String! #TODO remove
    verificationExpiry: Int! #TODO remove

    registeredOn: Int!
    isCompany: Boolean!
    rating: Int!

    frequency: String!
    avgViews: Int!
    customers: String!
    level: Int! #TODO remove

    # customer resolvers
    posts: [Post]
    history: [History]
    # message: [Enquiry]
}

type Portfolio {
    title: String!
    platform: String!
    url: String!
    images: [Image]!
}

type Address {
    houseNo: String!
    street: String!
    city: String!
    district: String!
    state: String!
    country: String!
    pinCode: String!
}

# User Info for post
type BasicUser {
    id: ID!
    displayName: String!
    rating: Float!
}

type History {
    id: ID!
    title: String!
}

type Image {
    title: String!
    url: String!
    thumbUrl: String!
    description: String!
}

type AuthUser {
    email: String!
    displayName: String!
    token: String!
    expiry: Int!
    # roles: [String]
}

"""  External messages """
type Enquiry {
    id: ID!
    postId: String!
    userId: String!
    name: String!
    email: String!
    phone: String!
    subject: String!
    content: String!
    messagedAt: Int!
    isRead: Boolean!
}
""" Logged in user -> logged in user """
type Chat {
    id: ID!
    userId: String!
    receiverId: String!
    messages: [Message]!
}

type Message {
    content: String
    image: ChatImage
    isRead: Boolean!
    messagedAt: Int!
}

type ChatImage {
    url: String
    thumbUrl: String
}

type Query {
    login(credentials: Credential): AuthUser!
    user(id: String): User!
    users: [User] @auth # TODO: remove
    userByUrl(url: String): User!
    post(id: String): Post!
    postByUrl(url: String): Post!
    posts(filters: PostFilter): [Post!]!

    #auth

}

""" Registration input """
input NewUser {
    firstName: String! @maxlength(max: 30) @demo
    lastName: String! @maxlength(max: 30)
    email: String!
    password: String!
}
""" Login input """
input Credential {
    username: String!
    password: String!
}

input Paging {
    offset: Int!
    limit: Int!
}

input PostFilter {
    paging: Paging
    filter: SearchFilter
    order: SortOrder
}

input SearchFilter {
    keyword: String! ## Rethink
    searchOn: String!
    tags: [String]!
    userId: String!
}

input SortOrder {
    sortBy: String!
    order: Boolean!
}

input NewPost {
    title: String!
    description: String!
    images: [PostImage]!
    price: Float!
    tags: [String]!

    platforms: [String]!
    language: String!
    expectedViews: Int!
    duration: Int!
    availableFrom: Int!
    publishingDate: Int!
    createdAt: Int!

    country: String
    state: String
    city: String
}

input PostImage {
    title: String!
    image: String! # upload to url
    description: String!
}

input ChangePassword {
    oldPassword: String!
    password: String!
    confirmPassword: String!
}

input NewEnquiry {
    postId: String!
    name: String!
    email: String!
    phone: String!
    subject: String!
    content: String!
}

input NewMessage {
    receiverId: String
    content:  String
    image: Upload
}

type Mutation {
    addPost(post: NewPost!): Post
    editPost(post: NewPost!): Post
    forgotPassword(email: String!): Boolean
    changePassword(password: ChangePassword!): Boolean
    verifyEmail(key: String!): AuthUser

    # No auth
    register(user: NewUser): Boolean!
    uploadImage(
        picture: Upload!,
        """ 'kind' is bucket its going to store, like post, user or message images """
        kind: String
    ): String

    uploadImages(pictures: [Upload!]): String
}